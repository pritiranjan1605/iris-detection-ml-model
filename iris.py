# -*- coding: utf-8 -*-
"""iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VXTMjy9XmjbPb6ihHEkTLqH7Oyq-qsuE

# **IMPORTING DEPENDENCIES**

---
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

"""# **IMPORTING DATASET**

---


"""

iris_dataframe = pd.read_csv('/content/drive/MyDrive/iris.csv')

iris_dataframe.head()

iris_dataframe['variety'].value_counts()

figure = plt.figure()
axes = figure.add_axes([0,0,1,1])
axes.bar(iris_dataframe['variety'],iris_dataframe['petal.length'])
plt.xlabel('variety of iris')
plt.ylabel('petal length')
plt.title('variety vs petal length')

iris_dataframe.groupby('variety').mean()

"""# **CHECKING FOR NULL VALUE**

---


"""

iris_dataframe.isnull().sum()

x=iris_dataframe.drop(columns='variety',axis=1)
y=iris_dataframe['variety']

print(x)

print(y)

iris_dataframe['variety'].value_counts()

sns.countplot(x='variety',data = iris_dataframe)

"""# **STANDARDIZATION**

---


"""

scalar=StandardScaler()

scalar.fit(x)

standard_data = scalar.transform(x)

x=standard_data

"""# **SPLINTING TRAIN AND TEST DATA**

---


"""

x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=2,test_size=0.2,stratify=y)

x.shape

x_test.shape

x_train.shape

y_test.shape

y_train.shape

"""# **LOADING DATA TO MACHINE**

---


"""

classifier = LogisticRegression()

classifier.fit(x_train,y_train)

xtrain = classifier.predict(x_train)
xtrainaccuracy = accuracy_score(xtrain,y_train)
print(xtrainaccuracy)

xtest = classifier.predict(x_test)
xtestaccuracy = accuracy_score(xtest,y_test)
print(xtestaccuracy)

"""# **PREDICTIVE SYSTEM**

---


"""

inputdata = [4.9,3,1.4,.2]
inputarray = np.asarray(inputdata)
reshapearr = inputarray.reshape(1,-1)
stdata = scalar.transform(reshapearr)
predict =classifier.predict(stdata)
print(predict[0],"is the variety")